# https://circleci.com/docs/2.0/language-android/ for more details.
version: 2.1

# Orbs are reusable packages of CircleCI configuration that you may share across projects, enabling you to create encapsulated, parameterized commands, jobs, and executors that can be used across multiple projects.
# See: https://circleci.com/docs/2.0/orb-intro/
orbs:
  android: circleci/android@1.0.3

# Define a job to be invoked later in a workflow.
# See: https://circleci.com/docs/2.0/configuration-reference/#jobs
jobs:
  build-and-test:
    executor:
      name: android/android-machine

    steps:
      # checkout the code from the repository
      - checkout
      - run:
          command: chmod +x ./gradlew
      - run:
          name: Decode google-services.json file
          command: echo '$(echo $ENCODED_GOOGLE_SERVICES | base64 -d)' > app/google-services.json
      - run:
          name: Decode proguard-rules.pro
          command: echo '$(echo $ENCODED_PROGUARD | base64 -d)' > app/proguard-rules.pro
      - run:
          name: set Google Maps API kwy
          command: echo ${MAPS_API_KEY} > local.properties

      # The next step will run the unit tests
      - android/run-tests:
          test-command: ./gradlew lint testDebug --continue

      # Then start the emulator and run the Instrumentation tests!
      - android/start-emulator-and-run-tests:
          test-command: ./gradlew connectedDebugAndroidTest
          system-image: system-images;android-24;google_apis;x86

      # And finally run the release build
      - run:
          name: Assemble release build
          command: ./gradlew assembleRelease

# Invoke jobs via workflows
# See: https://circleci.com/docs/2.0/configuration-reference/#workflows
workflows:
  build_and_test:

    jobs:
      - build-and-test
